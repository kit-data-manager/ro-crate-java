plugins {
    id 'java'
    id 'jvm-test-suite'
    id 'application'
    id 'jacoco'
    // Adds coveralls task for CI to send results to the coveralls service.
    id "com.github.kt3k.coveralls" version "2.12.2"

    // Instructions: https://github.com/researchgate/gradle-release
    // Available versions: https://plugins.gradle.org/plugin/net.researchgate.release
    id 'net.researchgate.release' version '3.1.0'
    id "maven-publish"
    // Publishing of JAR to Nexus instances (e.g., OSSRH)
    // https://github.com/gradle-nexus/publish-plugin
    id "io.github.gradle-nexus.publish-plugin" version "2.0.0"
    id "io.freefair.maven-publish-java" version "8.13.1"
}

group 'edu.kit.datamanager'
description = "A library for easy creation and modification of valid RO-Crates."

println "Running gradle version: $gradle.gradleVersion"
println "Building ${name} version: ${version}"
println "JDK version: ${JavaVersion.current()}"
println "Profile (system property): ${System.getProperty('profile')}"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

if (JavaVersion.current() == JavaVersion.VERSION_17) {
    println "Setting encoding to UTF-8 manually"
    compileJava.options.encoding = "UTF-8"
    compileTestJava.options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
}

ext {
    jacksonVersion  = '2.18.3'
}

dependencies {
    // JUnit setup for testing
    testImplementation(platform("org.junit:junit-bom:5.12.1"))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testRuntimeOnly('org.junit.platform:junit-platform-launcher')
    // JSON object mapping / (de-)serialization
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    // http client
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    // common file system operations
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'
    // read from and write to zip files
    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.11.5'
    // compare json documents in tests
    implementation 'com.github.fslev:json-compare:7.0'
    // url validator
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.9.0'
    // logging
    implementation group: 'org.slf4j', name: 'slf4j-jdk14', version: '2.0.17'
    // JSON-LD, Zenodo mapping
    implementation group: 'com.apicatalog', name: 'titanium-json-ld', version: '1.6.0'
    // metadata validation, profiles based on JSON schema
    implementation group: "com.networknt", name: "json-schema-validator", version: "1.5.6"
    implementation 'org.glassfish:jakarta.json:2.0.1'
    //JTE for template processing
    implementation('gg.jte:jte:3.2.0')
    implementation("org.freemarker:freemarker:2.3.34")
}

logging.captureStandardOutput LogLevel.INFO

def signingTasks = tasks.withType(Sign)
tasks.withType(AbstractPublishToMaven).configureEach{
    mustRunAfter(signingTasks)
 }

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }

    test {
        java {
            // compileClasspath += sourceSets.main.output
            //runtimeClasspath += sourceSets.main.output
            srcDirs = ['src/test/java']
        }
    }

    performanceTest {
        java {
            compileClasspath += sourceSets.main.output
            runtimeClasspath += sourceSets.main.output
            srcDirs = ['src/performanceTest/java']
        }
    }
}

configurations {
    performanceTestImplementation.extendsFrom implementation
}


tasks.register('performanceContextEntitiesBenchmark', JavaExec) {
    description = "Run the context entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.singlecratebenchmarks.ContextualEntitiesPerformance'
}

tasks.register('performanceLocalDataEntitiesBenchmark', JavaExec) {
    description = "Run the local data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.singlecratebenchmarks.LocalDataEntitiesPerformance'
}

tasks.register('performanceRemoteDataEntitiesBenchmark', JavaExec) {
    description = "Run the remote data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.singlecratebenchmarks.RemoteDataEntitiesPerformance'
}

tasks.register('performanceMixEntitiesBenchmark', JavaExec) {
    description = "Run the remote data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.singlecratebenchmarks.MixtureOfEntitiesPerformance'
}

tasks.register('performanceDeletionEntitiesBenchmark', JavaExec) {
    description = "Run the remote data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.singlecratebenchmarks.DeletionEntitiesPerformance'
}

tasks.register('performanceMultipleCratesBenchmark', JavaExec) {
    description = "Run the remote data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.multiplecrates.MultipleCratesBenchmark'
}

tasks.register('performanceReadWriteMultipleCratesBenchmark', JavaExec) {
    description = "Run the remote data entities benchmarks."
    classpath = sourceSets.performanceTest.runtimeClasspath
    mainClass = 'edu.kit.datamanager.ro_crate.multiplecrates.MultipleCratesWriteAndRead'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        csv.required = true
        xml.required = true // coveralls plugin depends on xml format report
    }
}

jacoco {
    toolVersion = "0.8.12"
}

// maxParallelForks(2)
// failFast = true

if (System.getProperty('profile') == "release") {
    println 'Using release profile for building ' + project.getName()
    apply from: 'gradle/profile-release.gradle'
}
